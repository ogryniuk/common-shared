package be.yildiz.common.nativeresources;

import java.io.File;
import java.io.FileFilter;
import java.security.InvalidParameterException;
import java.util.List;
import java.util.Map;

import be.yildiz.common.collections.Lists;
import be.yildiz.common.collections.Maps;
import be.yildiz.common.log.Logger;
import be.yildiz.common.resource.ZipUtil;
import be.yildiz.common.util.Util;

/**
 * Utility class to load the native library from the classpath or a jar.
 * @author Van den Borre Gr√©gory
 */
// FIXME delete
public final class NativeResourceLoader {

    /**
     * Contains the found native libraries and their full path.
     */
    private static final Map < String, String > AVAILABLE_LIB = Maps.newMap();

    /**
     * Directory containing the native libraries, can be win32, win34, linux32,
     * linux64 depending on the operating system and the underlying
     * architecture.
     */
    public static final String DIRECTORY;

    /**
     * Library file extension, can be .dll on windows, .so on linux.
     */
    public static final String LIBRARY_EXTENSION;

    static {

        if (Util.isLinux()) {
            LIBRARY_EXTENSION = ".so";
            if (Util.isX86()) {
                DIRECTORY = "linux32";
            } else {
                DIRECTORY = "linux64";
            }
        } else {
            LIBRARY_EXTENSION = ".dll";
            if (Util.isX86()) {
                DIRECTORY = "win32";
            } else {
                DIRECTORY = "win64";
            }
        }
        // register all available libs:
        String[] classPath = System.getProperty("java.class.path", "").split(File.pathSeparator);
        List < String > jarList = Lists.newList();
        List < String > appList = Lists.newList();
        for (String s : classPath) {
            if (s.endsWith(".jar")) {
                jarList.add(s);
            } else {
                appList.add(s);
            }
        }
        // register lib from folder:
        for (String current : appList) {
            File app = new File(new File(current).getParentFile().getParentFile().getAbsolutePath() + File.separator + "lib"
                    + File.separator + NativeResourceLoader.DIRECTORY);
            NativeResourceLoader.registerLibInDir(app);
        }
        // register libs from jar and extract them.
        File file = new File(System.getProperty("user.home") + File.separator + "yildiz_lib");
        for (String current : jarList) {
            File app = new File(current);
            ZipUtil.extractFilesFromDirectory(app, NativeResourceLoader.DIRECTORY, file.getAbsolutePath());
        }
        NativeResourceLoader.registerLibInDir(new File(file.getAbsolutePath() + File.separator + NativeResourceLoader.DIRECTORY));
    }

    /**
     * Give the full path of a registered native library.
     * @param lib
     *            Library to check.
     * @return The absolute path of the given library.
     */
    public static String getLibPath(final String lib) {
        File f = new File(lib + NativeResourceLoader.LIBRARY_EXTENSION);
        if (f.exists()) {
            return f.getAbsolutePath();
        }
        return NativeResourceLoader.AVAILABLE_LIB.get(lib);
    }

    /**
     * Load a native library, it will check if it is contained in a jar, if so,
     * the library will be extracted in a temporary place and loaded from there.
     * @param libs
     *            Native library name to load.
     */
    public static void loadLibrary(final String... libs) {
        String nativePath = null;
        for (String lib : libs) {
            Logger.info("Loading native : " + lib);
            File f = new File(lib + NativeResourceLoader.LIBRARY_EXTENSION);
            if (f.exists()) {
                nativePath = f.getAbsolutePath();
            } else {
                nativePath = NativeResourceLoader.AVAILABLE_LIB.get(lib);
                if (nativePath == null) {
                    throw new InvalidParameterException(lib + " has not been found in path.");
                }

            }
            Logger.info(new File("test").getAbsolutePath());
            System.load(nativePath);
            Logger.info(nativePath + " loaded.");
        }
    }

    /**
     * Register the found libraries in a directory to be ready to be loaded.
     * @param dir
     *            Directory holding the libraries.
     */
    private static void registerLibInDir(final File dir) {
        if (dir.exists() && dir.isDirectory()) {
            File[] contents = dir.listFiles(new FileFilter() {

                @Override
                public boolean accept(final File pathname) {
                    return pathname.isFile() && pathname.getName().endsWith(NativeResourceLoader.LIBRARY_EXTENSION);
                }
            });
            for (File f : contents) {
                NativeResourceLoader.AVAILABLE_LIB
                        .put(f.getName().replace(NativeResourceLoader.LIBRARY_EXTENSION, ""), f.getAbsolutePath());
            }
        }
    }

    /**
     * Simple constructor, private to prevent use.
     */
    private NativeResourceLoader() {
        super();
    }

    /**
     * To load the shared libraries, only used for windows, on linux, will not
     * load anything.
     * @param libs
     *            Libraries to be loaded only on windows.
     */
    public static void loadBaseLibrary(String... libs) {
        if (!Util.isLinux()) {
            loadLibrary(libs);
        }
    }

}
